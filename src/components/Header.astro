---
// --- Props ---
const { content = {} } = Astro.props;

// --- Content Configuration ---
const navLinks = content?.navLinks ?? [
  { href: '#features', name: '機能' },
  { href: '#pricing', name: '料金' },
  { href: '#faq', name: 'よくある質問' },
];
const cta = content?.cta ?? 'お問い合わせ';

// --- Language Configuration ---
const languages = [
  { code: 'jp', name: '日本語' },
  { code: 'en', name: 'English' },
  { code: 'zh', name: '中文' },
  { code: 'th', name: 'ไทย' },
];
const { pathname } = Astro.url;

// --- STEP 1: 現在の言語をURLから判定 ---
const pathParts = pathname.split('/').filter(Boolean);
const langCodes = languages.map(l => l.code).filter(c => c !== 'jp');
let currentLangCode = 'jp';

if (pathParts.length > 0 && langCodes.includes(pathParts[0])) {
    currentLangCode = pathParts[0];
}
const logoHref = currentLangCode === 'jp' ? '/' : `/${currentLangCode}/`;

// --- STEP 2: 言語部分を除いた「ベースパス」を生成 ---
let basePath = '';
if (currentLangCode !== 'jp') {
    basePath = `/${pathParts.slice(1).join('/')}`;
} else {
    basePath = `/${pathParts.join('/')}`;
}
if (basePath === '/') {
    basePath = '';
}

// --- STEP 3: 各言語のページへのURLを動的に生成 ---
const pageLanguages = languages.map(lang => {
    let newHref = '';
    if (lang.code === 'jp') {
        newHref = basePath || '/';
    } else {
        newHref = `/${lang.code}${basePath}`;
    }
    return { ...lang, href: newHref };
});

// --- STEP 4: 表示用に現在の言語を先頭にして並び替え ---
const currentLanguage = pageLanguages.find(lang => lang.code === currentLangCode) || pageLanguages[0];
const sortedLanguages = [
  currentLanguage, ...pageLanguages.filter(lang => lang.code !== currentLanguage.code)
];
---

<!-- 2025年最新のヘッダーデザイン：DaisyUI統合で高級感を演出 -->
<header class="navbar fixed top-0 left-0 right-0 z-50 glass-effect border-b border-base-300/50">
  <div class="navbar-start">
    <!-- ロゴ：DaisyUI統合のモダンなデザイン -->
    <a href={logoHref} class="btn btn-ghost text-xl font-bold">
      <div class="w-10 h-10 luxury-gradient rounded-xl flex items-center justify-center shadow-lg">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
        </svg>
      </div>
      <span class="gradient-text font-heading ml-2">Omiseweb</span>
    </a>
  </div>
  
  <!-- デスクトップナビゲーション -->
  <div class="navbar-center hidden lg:flex">
    <ul class="menu menu-horizontal px-1">
      {navLinks.map(link => (
        <li>
          <a 
            href={link.href} 
            class="text-base-content hover:text-primary hover:bg-primary/10 rounded-xl transition-all duration-300"
          >
            {link.name}
          </a>
        </li>
      ))}
    </ul>
  </div>

  <!-- 右側のアクションエリア -->
  <div class="navbar-end">
    
    <!-- 言語スイッチャー：DaisyUI統合のドロップダウン -->
    <div class="dropdown dropdown-end hidden md:block">
      <div tabindex="0" role="button" class="btn btn-ghost btn-sm">
        <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0112 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 013 12c0-1.605.42-3.113 1.157-4.418" />
        </svg>
        <span class="ml-1">{currentLanguage.name}</span>
        <svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </div>
      <ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-40 p-2 shadow-lg border border-base-300">
        {sortedLanguages.map(lang => (
          <li>
            <a 
              href={lang.href} 
              class:list={[
                "text-sm",
                { "bg-primary text-primary-content": lang.code === currentLangCode }
              ]}
            >
              {lang.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
    
    <!-- CTAボタン：DaisyUI統合のグラデーション -->
    <a 
      href="#contact" 
      class="btn btn-primary hidden sm:inline-flex"
    >
      <span>{cta}</span>
      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
      </svg>
    </a>

    <!-- モバイルメニューボタン：DaisyUI統合 -->
    <div class="dropdown dropdown-end lg:hidden">
      <div tabindex="0" role="button" class="btn btn-ghost">
        <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
      </div>
      <ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow-lg border border-base-300">
        <!-- ナビゲーションリンク -->
        {navLinks.map(link => (
          <li>
            <a href={link.href} class="text-base-content hover:text-primary hover:bg-primary/10">
              {link.name}
            </a>
          </li>
        ))}
        
        <!-- CTAボタン（モバイル） -->
        <li>
          <a href="#contact" class="btn btn-primary btn-sm mt-2">
            {cta}
          </a>
        </li>
        
        <!-- 言語選択 -->
        <li class="menu-title">
          <span>言語を選択</span>
        </li>
        {sortedLanguages.map(lang => (
          <li>
            <a 
              href={lang.href} 
              class:list={[
                "text-sm",
                { "bg-primary text-primary-content": lang.code === currentLangCode }
              ]}
            >
              {lang.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</header>

<!-- ヘッダーの高さ分のスペーサー -->
<div class="h-16 lg:h-20"></div>

<script>
  // DOMの読み込みが完了してからスクリプトを実行
  document.addEventListener('DOMContentLoaded', () => {
    
    // --- スクロール時のヘッダーエフェクト ---
    let lastScrollTop = 0;
    const header = document.querySelector('header');
    
    window.addEventListener('scroll', () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      
      if (scrollTop > lastScrollTop && scrollTop > 100) {
        // 下にスクロール
        header?.classList.add('transform', '-translate-y-full');
      } else {
        // 上にスクロール
        header?.classList.remove('transform', '-translate-y-full');
      }
      
      lastScrollTop = scrollTop;
    });
  });
</script>
